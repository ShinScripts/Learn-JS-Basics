[
	{
		"question": "Create a variable <mark>i</mark> with the value of <mark>10</mark>",
		"code": "// write your code below \n",
		"keywords": ["let", "i", "10"],
		"assert": "i === 10",
		"errorMessage": "The value of i is not correct",
		"title": "Creation of variables",
		"infoBeforeCode": "In JavaScript, variables are used to store values or data that can be used later in the program. The three most common ways to declare variables in JavaScript are <mark>var</mark>, <mark>let</mark>, and <mark>const</mark>.<br><br><mark>var</mark> is used to declare a variable that can be accessed anywhere within the function or even outside the function. This means that the value of a <mark>var</mark> variable can be changed or updated throughout the program.<br><br><mark>let</mark> and <mark>const</mark> are used to declare variables that have a limited scope, meaning that they are only accessible within a specific block of code (e.g., within a loop or a function). The main difference between <mark>let</mark> and <mark>const</mark> is that <mark>let</mark> allows the value of the variable to be changed or updated later in the program, while const does not allow the value to be changed once it has been declared.<br><br>For example, let's say we want to store the name of a person in a variable:<br>",
		"infoAfterCode": "In this example, we first declare the variable <mark>name</mark> using <mark>var</mark>, <mark>let</mark>, and <mark>const</mark>. We then try to change the value of name to 'Mary'. With <mark>var</mark> and <mark>let</mark>, this is possible and the output is 'Mary'. However, with <mark>const</mark>, an error is thrown because we are trying to change the value of a constant variable.<br><br>In summary, <mark>var</mark>, <mark>let</mark>, and <mark>const</mark> are used to declare variables in JavaScript. <mark><</mark> has a wider scope and allows the value of the variable to be changed later in the program, while <mark>let</mark> and <mark>const</mark> have a limited scope and <mark>const</mark> does not allow the value to be changed once it has been declared.",
		"infoCode": [
			"// Using var",
			"var name = 'John';",
			"name = 'Mary';",
			"console.log(name); // Output: Mary",
			"",
			"// Using let",
			"let name = 'John';",
			"name = 'Mary';",
			"console.log(name); // Output: Mary",
			"",
			"// Using const",
			"const name = 'John';",
			"name = 'Mary'; // Error: Assignment to constant variable",
			"console.log(name); // Output: Mary"
		]
	},
	{
		"question": "Set the value of the variable <mark>i</mark> so that the following equation is correct: <u>i + 7 = 10</u>",
		"code": "// edit the code below\nlet i = 50;",
		"keywords": ["i"],
		"assert": "i+7 === 10",
		"errorMessage": "The value of i is not correct for the equation to be to correct"
	},
	{
		"question": "Change the loop so that the value of <mark>x</mark> <u>increases by 2 per loop</u> (instead of 1 as it is currently)",
		"code": "let x = 0;\n\nfor (let i = 0; i < 10; i++) {\n// edit the expression below\nx++;\n}",
		"keywords": ["+=", "2"],
		"assert": "x === 20",
		"errorMessage": "The value of x is not correct at the end of the loop, change the amount x gets incremented with",
		"title": "For loops",
		"infoBeforeCode": "Let's say you want to write a program that counts from 1 to 10 and logs each number to the console. You could do this using a for loop like this:<br>",
		"infoAfterCode": "Here's what's happening in this code:<br>1. <mark>let i = 1</mark>: This sets the starting value for the loop counter variable <mark>i</mark> to 1.<br><br>2. <mark>i <= 10</mark>: This is the condition that needs to be true in order for the loop to continue running. As long as 'i' is <u>less than or equal</u> to 10, the loop will keep running.<br><br>3. <mark>i++</mark>: This is the 'increment' statement that gets executed after each iteration of the loop.It adds 1 to 'i' each time the loop runs.<br><br>4. <mark>console.log(i)</mark>: This logs the value of 'i' to the console on each iteration of the loop.<br><br>So, when you run this code, it will log the numbers 1 through 10 to the console.",
		"infoCode": ["for (let i = 1; i <= 10; i++) {", "console.log(i);", "}"]
	},
	{
		"question": "Set the string variable <mark>x</mark> so that the loop <u>returns 4</u>",
		"code": "// edit the code below\nlet a = 0;\nlet x = \"Vanilla\";\n\nfor (let i = 0; i < x.length; i++) {\na++;\n}",
		"keywords": ["x"],
		"assert": "x.length === 4 && a === 4",
		"errorMessage": "The loop does not return 4, make sure to check the length of the variable x",
		"title": "Strings and lengths",
		"infoBeforeCode": "In JavaScript, <mark>string.length</mark> is a property that returns the number of characters in a string. Here's an example that demonstrates how to use <mark>string.length</mark>:<br>",
		"infoAfterCode": "In this example, we're first creating a string variable <mark>greeting</mark> that contains the text 'Hello, world!'. We then use the <mark>length</mark> property to get the number of characters in the string and assign it to the variable <mark>greetingLength</mark>. Finally, we log the value of <mark>greetingLength</mark> to the console.<br><br>When you run this code, you'll see that the value of <mark>greetingLength</mark> is <mark>13</mark>, which is the number of characters in the string 'Hello, world!'.",
		"infoCode": [
			"const greeting = 'Hello, world!';",
			"const greetingLength = greeting.length;",
			"",
			"console.log(greetingLength);"
		]
	},
	{
		"question": "Use a function from the <mark>Math</mark> class to round to create a function that takes in a number as a parameter and <u>rounds it up</u> to the nearest non decimal number ",
		"code": "function round(number) {\n// write your code below here\nreturn \n}",
		"keywords": ["Math", "ceil()"],
		"assert": "round(2.3) === 3",
		"errorMessage": "The function does not round the parameter 'number' to the nearest non decimal number",
		"title": "The Math Class",
		"infoBeforeCode": "The <mark>Math</mark> class in JavaScript has quite a few methods. Here we'll be explaining the <mark>Math.round()</mark>, <mark>Math.ceil()</mark> and <mark>Math.floor()</mark> methods.<br><br><br><mark>Math.round()</mark>: This method rounds a number to the nearest integer. If the number is halfway between two integers, it rounds up to the nearest even integer.<br><br><mark>Math.ceil()</mark>: This method rounds a number up to the next highest integer.<br><br><mark>Math.floor(): This method rounds a number down to the next lowest integer.</mark>",
		"infoAfterCode": "",
		"infoCode": [
			"const mid = 5.5;",
			"const low = 3.2;",
			"const high = 7.9;",
			"",
			"const rounded1 = Math.round(mid);",
			"const rounded2 = Math.round(low);",
			"const rounded3 = Math.round(high);",
			"console.log(rounded1, rounded2, rounded3); // Output: 6, 3, 8",
			"",
			"const ceil1 = Math.ceil(mid);",
			"const ceil2 = Math.ceil(low);",
			"const ceil3 = Math.ceil(high);",
			"console.log(ceil1, ceil2, ceil3); // Output: 6, 4, 8",
			"",
			"const floor1 = Math.floor(mid);",
			"const floor2 = Math.floor(low);",
			"const floor3 = Math.floor(high);",
			"console.log(floor1, floor2, floor3); // Output: 5, 3, 7"
		]
	},
	{
		"question": "Edit the function named <mark>max</mark> so it always returns the larger number between <mark>x</mark> and <mark>y</mark>.<br>Also write a function named <mark>min</mark> that returns the smallest of 2 parameters! <br><br><i>Note: the values of <mark>x</mark> and <mark>y</mark> will be random</i>",
		"code": "// write your code below\nfunction max(x, y){\n\n}",
		"keywords": ["Math", "max()", "return", "min()"],
		"assert": "max(6,8) === 8 && max(1,6) === 6 && min(2,5) === 2 && min(14,21) === 14",
		"errorMessage": "Either <mark>max</mark> does not return the largest number or <mark>min</mark> does not return the smallest number"
	}
]
